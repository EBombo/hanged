import { spinLoaderMin } from "../../../components/common/loader";
import React, { useEffect, useGlobal, useState } from "reactn";
import { config, firestore } from "../../../firebase";
import { useFetch } from "../../../hooks/useFetch";
import defaultTo from "lodash/defaultTo";
import { useRouter } from "next/router";
import styled from "styled-components";
import { ButtonAnt, Input, Select, Switch } from "../../../components/form";
import { useUser } from "../../../hooks";
import { Image } from "../../../components/common/Image";
import { mediaQuery } from "../../../constants";
import { Collapse } from "antd";

export const Game = (props) => {
  const router = useRouter();
  const { Panel } = Collapse;
  const { Fetch } = useFetch();
  const [, setLSAuthUser] = useUser();
  const [audios] = useGlobal("audios");
  const [game, setGame] = useState(null);
  const { userId, tokenId, gameId } = router.query;
  const [, setAuthUser] = useGlobal("user");
  const [isLoading, setIsLoading] = useState(true);
  const [isLoadingSave, setIsLoadingSave] = useState(false);

  const [userIdentity, setUserIdentity] = useState(true);
  const [showAllCards, setShowAllCards] = useState(false);
  const [cardAutofill, setCardAutofill] = useState(false);
  const [showParticipants, setShowParticipants] = useState(true);
  const [showBoardToUser, setShowBoardToUser] = useState(false);
  const [awards, setAwards] = useState([
    {
      name: "",
      order: 1,
    },
  ]);
  const [showAwards, setShowAwards] = useState(false);

  useEffect(() => {
    if ((!tokenId && !userId) || !gameId) return;

    const verifyUser = async () => {
      try {
        const url = `${config.serverUrlEvents}/api/tokens`;
        const { response, error } = await Fetch(url, "POST", { tokenId, userId });

        if (error) {
          props.showNotification("ERROR", "Error al validar la cuenta");
          return router.push("/login");
        }

        return response.user;
      } catch (error) {
        console.error(error);
      }
    };

    const fetchGame = async () => {
      const gameRef = await firestore.doc(`games/${gameId}`).get();
      return gameRef.data();
    };

    const fetchUserByToken = async () => {
      try {
        const promiseUser = verifyUser();
        const promiseGame = fetchGame();

        const response = await Promise.all([promiseUser, promiseGame]);

        const authUser = response[0];
        const game = response[1];

        const formatUser = {
          id: authUser.uid,
          nickname: authUser.name,
          email: authUser.email,
          isAdmin: true,
        };

        if (!game.usersIds.includes(formatUser.id)) return router.push("/login");

        await setAuthUser(formatUser);
        setLSAuthUser(formatUser);
        setGame(game);
        setIsLoading(false);
      } catch (error) {
        console.error(error);
      }
    };

    fetchUserByToken();
  }, [tokenId, gameId]);

  const createLobby = async (typeOfGame) => {
    setIsLoadingSave(true);
    try {
      const pin = await generatePin();

      const lobbiesRef = firestore.collection("lobbies");
      const lobbyId = lobbiesRef.doc().id;

      const promiseLobby = lobbiesRef.doc(lobbyId).set({
        pin,
        game,
        typeOfGame,
        id: lobbyId,
        updateAt: new Date(),
        createAt: new Date(),
        isLocked: false,
        isClosed: false,
        startAt: null,
        settings: {
          userIdentity,
          showAllCards,
          cardAutofill,
          showParticipants,
          showBoardToUser,
          // TODO: The order number could be generated by the index of a map.
          awards: showAwards ? awards.filter((award) => award.name !== "") : null,
        },
      });

      const promiseCountPlays = firestore.doc(`games/${game.id}`).update({ countPlays: (game?.countPlays ?? 0) + 1 });

      await Promise.all([promiseLobby, promiseCountPlays]);

      return router.push(`/lobbies/${lobbyId}`);
    } catch (error) {
      console.log(error);
    } finally {
      setIsLoadingSave(false);
    }
  };

  const generatePin = async () => {
    const pin = Math.floor(100000 + Math.random() * 900000);
    const isValid = await validatePin(pin);

    return isValid && pin > 99999 ? pin.toString() : await generatePin();
  };

  const validatePin = async (pin) => {
    const gamesRef = await firestore.collection("games").where("pin", "==", pin).get();

    return gamesRef.empty;
  };

  if (isLoading) return spinLoaderMin();

  return (
    <GameMenu {...props}
      showChooseGameMode={true}
      game={game}
      audios={audios}
      isLoadingSave={isLoadingSave}
      createLobby={createLobby}
    />
  );
};

